Самообразование.
Ссылка на урок:
https://vk.com/bookmarks?from_menu=1&z=video-101965347_456279298%2F2b9f47d0d263a47fbc%2Fpl_post_-3183750_349237

***
lexer   - лексер    - лексический анализатор
parser  - парсер    - синтаксический анализатор (разбор на символы(токены))
ast     - асд       - абстрактное синтаксическое дерево
token   - токен     - знак, символ и т.п.

***
Связь AST и парсера
Абстрактное синтаксическое дерево (AST) содержит связанные между собой экземпляры структур данных (узлов).
При этом узлами AST можно представить все конструкции, допустимые в соответствующем языке программирования.
Допустим, программа состоит из последовательных инструкций. Каждая инструкция — это определение функции или вызов функции. Тогда структура AST может быть такой:

Program (struct)
    -> std::vector<Statement*> statements

StatementKind (enum class)
    -> Function
    -> Call

Statement (struct)
    -> StatementKind kind

Function : Statement (struct)
    -> std::string name
    -> std::vector<Statement*> body

Call : Statement (struct)
    -> std::string name
    -> Function* called
В этом случае, стадия синтаксического анализа, создающего начальное состояние AST, могла бы выглядеть так:

auto parser = make_unique<Parser>(lexer);
auto ast = parser.parseAST();
Error Recovery
Кроме создания AST, на стадии синтаксического анализа при наличии в исходном коде ошибок надо

сгенерировать сообщения об ошибках
постараться восстановиться после ошибок
В языках, где точка с запятой или конец строки служат разделителями, компилятору проще восстановиться после ошибок: он может просто сообщить об ошибке, проигнорировать все символы до следующего разделителя и продолжить разбор.

Постобработка дерева
Если язык разрешает разместить вызов функции до её определения, это легко обработать:

распарсим весь файл, включая вызовы функций, без проверки имён функций
после окончания разбора обойти дерево и найти все вызовы необъявленных функций
подобные шаги постобработки дерева называются "процедурами семантической проверки"
Роль AST и семантического анализа в компиляторе
Процедуры семантической проверки дополняют AST недостающими кросс-ссылками между ветвями дерева:

ссылками от узла вызова функции к узлу её объявления
ссылками от узла переменной в выражении к узлу объявления локальной переменной, глобальной переменной или параметра функции
ссылками от объявления переменной к узлу пользовательского типа данных, использованному в объявлении
при отсутствии обязательной ссылки создаётся новое сообщение об ошибке
также семантический анализ проверяет соответствие типов в выражениях
После семантического анализа мы получаем одно из двух:

либо неполное AST и список ошибок в программе
либо завершённое AST, гарантированно представляющее правильно написанную программу
После этого можно генерировать трёхадресный код, а затем отдавать его оптимизатору и кодогенератору под конкретную аппаратную платформу:

Обычно оптимизатор и платформо-зависимый кодогенератор объединяют в "бекенд компилятора"
Задача фронтенда компилятора — создать AST и сгенерировать из него трёхадресный код для бекенда.
Таким образом, лексический, синтаксический и семантический анализ вместе с генератором трёхадресного кода попадают во фронтенд.
Производительность AST
Обычно AST обходится несколько раз уже после создания. Если AST очень велико, то для приемлемой скорости узлы дерева должны располагаться в соседних областях памяти.

Это можно реализовать с помощью применения Memory Pool (или Object Pool) для размещения в памяти узлов дерева.
Для простых языков и небольших файлов такой подход может оказаться преждевременной оптимизацией.
